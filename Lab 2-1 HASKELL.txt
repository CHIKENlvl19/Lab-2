isPrime :: Int -> Bool
isPrime n
  | n <= 1 = False
  | otherwise = all (\x -> n `mod` x /= 0) [2..(n `div` 2)]

nearestPrime :: Int -> Int
nearestPrime n
  | isPrime n = n
  | otherwise = findPrime (n-1) (n+1)
  where
    findPrime :: Int -> Int -> Int
    findPrime smaller bigger
      | isPrime smaller = smaller
      | isPrime bigger = bigger
      | otherwise = findPrime (smaller-1) (bigger+1)

main :: IO ()
main = do
  n <- readLn
  let result = n - nearestPrime n
  putStrLn $ if result < 0 then show (result * (-1)) else show result